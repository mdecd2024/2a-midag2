var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://mdecd2024.github.io/2a-midag2/ \n 網誌:\xa0 https://mdecd2024.github.io/2a-midag2/blog \n 簡報:  \xa0https://mdecd2024.github.io/2a-midag2/reveal \n 倉儲:\xa0 https://github.com/mdecd2024/2a-midag2/tree/main \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n \n', 'tags': '', 'url': 'About.html'}, {'title': '各週指定任務', 'text': '\n 個人 cd2024 與分組倉儲的建立及維護. \n 各分組註冊一個 \xa0 Odoo \xa0 帳號, 選用免費的 PLM 模組, 取得各分組的產品生命週期管理系統網域, 並將 參考論文 的協同翻譯流程作為工作項目, 在各分組的 PLM 網域系統中留下任務分配與紀錄, 最終產出為一份 參考論文 的中英文翻譯並列 pdf 檔案, 其中包含各組員的心得報告. \n 指定 在 參考論文 的翻譯與閱讀過程, 將各組員的 cd2024 課程倉儲納為分組倉儲的子模組, 可以將各組員倉儲中的 \xa0 LaTeX \xa0 原始資料, 整合至分組倉儲中, 採 Github Actions 或近端使用 \xa0 MikTeX \xa0 建立分組的 參考論文 閱讀報告 pdf 檔案( 教學 ). \n 要求 各分組採協同方式, 在各 教學影片 上填上字幕並嵌入個人網站, 分工整理影片逐字稿與教學重點, 最後完成期中自評, 在期中考週將自評成績送至教務處. \n 要求 下載 Siemens NX 1872 至個人隨身碟或電腦 (含筆電), 後續專案系統的零組件繪圖可採電腦輔助設計室固態硬碟所安裝的 NX1872 或隨身碟中的可攜系統, 必須透過連網取得認證後才能開啟. \n 提醒 \xa0 CoppeliaSim 不同版本中存檔上的差異, 並強調 cd2024 將沿用 cad2023 課程中所使用的 4.5.1 版. \n 提示 \xa0 各分組可以利用可攜式 \xa0 Sourcetree \xa0 套件, 在近端充分了解個人倉儲與分組倉儲的各種改版或解決衝突議題. \n 在 第七週 摘要出 cd2024 各項分組協同模式的要點及執行方法. \n 在 第八週 說明如何應用 AI 協助先前閱讀論文, 整理資料以及延伸模擬程式的方法, 並提出既存鋼球平衡台控制與模擬的實習步驟. \n 第十週 起, 要求學員完成三項實習任務. ( 建立倉儲與網站連結 、 PID 控制文獻整理 、 NX 平台零組件繪圖 ) \n 第十二週 的三項實習任務 ( NXOpen 零組件繪製 、 分組倉儲設為評分倉儲子模組 、 足球機器人場景模擬 ). \n \n', 'tags': '', 'url': '各週指定任務.html'}, {'title': '1.', 'text': '分組倉儲 \n 個人倉儲 \n 41023156 \n 41123105 \n 41123108 \n 41123119 \n 41123123 \n 41123130 \n 41123145 \n 41123152 \n \n', 'tags': '', 'url': '1..html'}, {'title': '2.', 'text': '1. midag2 的 PLM 網域系統 任務分配與紀錄 \n \n \n \n 2. 參考論文 的中英文翻譯的工作分配 \n 41023156\xa0 \xa0 \xa0 \xa0p.\xa0 01~11\xa0  未完成 41123105\xa0 \xa0 \xa0  \xa0p.\xa0\xa0 12~22\xa0 41123108\xa0 \xa0 \xa0  \xa0p.\xa0\xa0 23~33\xa0\xa0 未完成 41123119\xa0 \xa0 \xa0  \xa0p. \xa0 34~44 41123123\xa0 \xa0 \xa0  \xa0p.\xa0\xa0 45~55 41123130\xa0 \xa0 \xa0 \xa0 p. \xa0 56~66 41123145\xa0 \xa0 \xa0 \xa0 p.  \xa067~77 41123152\xa0 \xa0 \xa0\xa0 \xa0p.  \xa078~87 \n 未完成的組員請把自己檔案上傳到 midag2 的 PLM 網域系統 中 \n 且把個人負責的  PDF\u3000TXT\u3000圖檔 \u3000放到  自己子模組 \xa0的  latax\xa0資料夾  中  \n 方法參考 影片:\xa0 如何利用 Github Actions 編譯 LaTeX 得到分組 pdf 報告 \n \n \n \n *****注意latax中圖表的檔名請用學號_數字*****\xa0 \xa0 以防合併時插入圖檔時錯誤 \n \n \n \n 3.latax 的撰寫是使用 線上latax撰寫工具  overleaf \xa0 \n 有以下優點 \n 1. 即時編輯和預覽： \xa0 \xa0 \xa0 \xa0- 即時預覽：當您撰寫 LaTeX 代碼時，Overleaf 會即時編譯並顯示結果，讓您可以立即看到文檔的效果，這對於排版和格式調整非常有幫助。 \xa0 \xa0 \xa0 \xa0- 雙欄模式：編輯區和預覽區並排顯示，您可以在編輯的同時查看文檔效果，便於即時檢查修改結果。 \n 2. 雲端存儲和協作 ： \xa0 \xa0 \xa0 \xa0- 雲端存儲：所有文檔都自動存儲在 Overleaf 的雲端服務器上，這意味著您不需要擔心數據丟失，而且可以從任何有網絡的地方訪問您的工作。 \xa0 \xa0 \xa0 \xa0- 多人協作：Overleaf 支持多人實時編輯同一文檔，這對於合作研究和團隊項目特別有用。您和您的合作者可以同時對文檔進行編輯和評論。 \n 3. 豐富的模板庫： \xa0 \xa0 \xa0 \xa0- Overleaf 提供大量的預設模板，包括論文、報告、簡歷、書籍等，這些模板符合多種格式要求，幫助您快速開始文檔創作。 \n 4. 版本控制： \xa0 \xa0 \xa0 \xa0- 版本管理：Overleaf 會自動保存每次編輯的版本，您可以輕鬆查看和回退到之前的版本，這對於追蹤修改歷史和恢復過去版本非常有用。 \xa0 \xa0 \xa0 - 除錯功能：Overleaf 會標註出文檔中的錯誤並提供解決方法，且可以快速跳轉到錯誤所在的行，方便您立即進行修改和調整。 \n 5. 無需安裝和配置： \xa0 \xa0 \xa0 \xa0 - 線上運行：Overleaf 是基於瀏覽器的工具，不需要在本地安裝任何軟件。這對於 LaTeX 初學者特別友好，因為他們不需要配置複雜的編譯環境。 \n 6. 跨平台兼容： \xa0 \xa0 \xa0 \xa0- Overleaf 可以在多種設備上使用，包括桌面電腦、筆記本電腦、平板和手機，這讓您可以在不同設備上靈活工作，隨時隨地進行文檔編輯和管理。 \n \n', 'tags': '', 'url': '2..html'}, {'title': '3.', 'text': '\n \n \n １ . 分組倉儲 \xa0的\xa0 latax\xa0資料夾 \xa0 \n \n 2. 缺兩人但先整合的 \xa0 PDF \xa0 TXT \xa0 圖檔 \xa0 \n \n 3. 未完成的組員請把自己檔案＂合併後＂\u3000\xa0\xa0 PDF \xa0 TXT \xa0 圖檔 \xa0\u3000上傳到 midag2 的 PLM 網域系統 中 \n \xa0 \xa0 且把＂合併後＂ PDF\u3000TXT\u3000圖檔\u3000 合併到\xa0 分組倉儲 \xa0的\xa0 latax\xa0資料夾 \xa0中 \n \n 4.合併方法參考 影片:\xa0 如何利用 Github Actions 編譯 LaTeX 得到分組 pdf 報告 \n', 'tags': '', 'url': '3..html'}, {'title': '4.', 'text': '41123105 \n 自評:65 \n 影片名稱:cd2024_2a_w3_如何將學員倉儲設為分組倉儲的子模組 \n \n   影片逐字檔 \n 41123108 \n 自評:65 \n 分組翻譯解析課程影片時長27分[影片連結] 影片字幕中整理出[逐字稿](雲端空間呈現) 影片逐字稿 \n 41123119 \n 自評:75 \n 完成事項 其影片逐字稿\xa0 影片 \xa0及\xa0 逐字稿 \n 41123123 \n 自評:65 \n 完成事項: 教學影片字幕 \n 41123130 \n 自評分數:70 \n 1.上一部教學影片字幕 \n \n 逐字稿 \n 41123145 \n 自評:75 \n [wcm2024_1a_w3_2_將組員的個人倉儲納為分組倉儲的子模組] 說明如何將組員的個人倉儲納入分組倉儲成為子模組 \n [影片逐字稿] \n 41123152 \n 自評:75 \n 完成事項 1.製作cd2024_2a_w2_4_利用 Replit 管理 Github Classroom 分組倉儲 (字幕版本)(25:02) \n cd2024_2a_w2_4_利用 Replit 管理 Github Classroom 分組倉儲 (字幕版本) \n 影片逐字稿 \n 2a_w1_video(字幕)  1.如何設定個人倉儲中的 Pelican 網誌 (12:51)  2.簡介 Odoo PLM 用法 (6:45) \n 2a_w1_word(逐字稿)  1.如何設定個人倉儲中的 Pelican 網誌 (12:51)  2.簡介 Odoo PLM 用法 (6:45) \n 2a_w2_video(字幕)  1.如何建立各組的 Team midag1 並利用 Codespaces 維護內容 (13:24)  2.利用 Replit 管理 Github Classroom 分組倉儲 (25:02)  3.如何利用近端可攜環境與外部 IPv4 開啟動態網站 (14:18) \n 2a_w2_word(逐字稿)  1.如何建立各組的 Team midag1 並利用 Codespaces 維護內容 (13:24)  2.利用 Replit 管理 Github Classroom 分組倉儲 (25:02)  3.如何利用近端可攜環境與外部 IPv4 開啟動態網站 (14:18) \n \n', 'tags': '', 'url': '4..html'}, {'title': '8.', 'text': 'update 了 組中自己的子模組 且學習如何用branch 協同更新 \n 方法如下: \n \n 1.在github main create new branch //branch name 我使用學號 41123119 \n \n \n 2.進入自己的branch \n \n 3.create a codspeace on 41123119 \n \n 4.open codspeace \n \n 5.chmod u+x init_replit ./init_replit \n \n 6.git submodule update --init //將 git submodule init 和 git submodule update 合併成一步 \n \n 7.cd 41123119 //進入41123119的子模組 \n 8.git pull origin main//從遠端更新程式碼 並將 main 合併至分支41123119 \n \n 9.cd ..//退到大廳 \n 10.git add . git commit git push \n 11.git merge//合併branch 41123119 至 main \n \n 12.在github確定沒衝突的合併後送出請求 \n \n 13.同意後即可 \n 14.合併後的branch 只要沒有與main有衝突的合併應該可以一直用 \n \n', 'tags': '', 'url': '8..html'}, {'title': '9.', 'text': '如何應用 AI 協助先前閱讀論文, 整理資料以及延伸模擬程式的方法, 並提出既存鋼球平衡台控制與模擬的實習步驟. \n \n 一、應用 AI 協助閱讀論文與整理資料 \n \n 工具如 GPT-4 可以用來生成簡短摘要，幫助快速了解論文內容。 \n 使用機器學習模型對論文進行 分類 ， 標註重要部分 （如方法、結果、結論）。 \n 使用工具如Zotero或Mendeley來管理和整理論文資料，並利用 AI 插件自動生成引用格式、標註和筆記。 \n \n 二、延伸模擬程式的方法 \n \n 先對現有的 鋼球平衡台 模擬程式進行詳細分析，理解其架構和主要功能。 \n 增加不同控制策略（ PID控制 、模糊控制、神經網絡控制等）的模擬。 \n 對新的或優化後的模擬程式進行測試，確保其正確性和穩定性。 \n \n 三、鋼球平衡台控制與模擬的實習步驟 \n \n 學習鋼球平衡台的 基本原理 ，包括動力學方程、控制策略等。 \n 閱讀相關 教材和論文 ，了解不同控制方法的理論基礎。 \n 設計鋼球平衡台的 模擬場景 。 \n 設計和實現不同的控制算法（如PID控制）。 \n 在模擬環境中測試和調整控制算法，確保其性能。 \n \n', 'tags': '', 'url': '9..html'}, {'title': '每週心得', 'text': '', 'tags': '', 'url': '每週心得.html'}, {'title': 'w1', 'text': '1.blog 的文檔在 markdown 用pelican套件 轉完後html檔會跑到 blog folder \n 2.為何可以用pelican? 在init_replit安裝 有安裝 pelican套件和markdown套件 \n 3.有關blog 的 檔案 1. local_publishconf.py 啟動留言 \n 2.pelicanconf.py 共用的   進去需要改相關的設定:AUTHOR=學號 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0SITENAME=網誌的名稱(協同產品設計實習) \n 3.publishconf.py 加留言的  進去需要改相關的設定:SITEURL=網誌網址 \n 4.轉檔透過gen_blog 先在shell打入chmod u+x gen_blog才能執行 u:使用者 x:執行 \n 5.page裡要自行更對應正確的網址 網誌前八行的格式不能改變第12行也不行亂改標題大小用#表示:大標#.小標## 轉檔打./gen_blog \n', 'tags': '', 'url': 'w1.html'}, {'title': 'w6', 'text': '用分支推回去分組倉儲: \n git sobmodule update --init \n cd 學號 \n git pull origin main \n cd .. \n git add . \n git commit -m" 更新資訊" \n git push\xa0 \n git merge \n', 'tags': '', 'url': 'w6.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'codespace', 'text': '', 'tags': '', 'url': 'codespace.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};