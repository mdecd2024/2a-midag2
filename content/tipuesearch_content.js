var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://mdecd2024.github.io/2a-midag2/ \n 網誌:\xa0 https://mdecd2024.github.io/2a-midag2/blog \n 簡報:  \xa0https://mdecd2024.github.io/2a-midag2/reveal \n 倉儲:\xa0 https://github.com/mdecd2024/2a-midag2/tree/main \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n \n', 'tags': '', 'url': 'About.html'}, {'title': '各週指定任務', 'text': '', 'tags': '', 'url': '各週指定任務.html'}, {'title': '1.個人 cd2024 與分組倉儲的建立及維護.', 'text': '分組倉儲 \n 41023156 \n 41123105 \n 41123108 \n 41123119 \n 41123123 \n 41123130 \n 41123145 \n 41123152 \n \n', 'tags': '', 'url': '1.個人 cd2024 與分組倉儲的建立及維護..html'}, {'title': '2. 為教學影片上字幕+自評成績', 'text': '41123105 \n 自評:65 \n 影片名稱:cd2024_2a_w3_如何將學員倉儲設為分組倉儲的子模組 \n \n   影片逐字檔 \n # 41123108 \n 自評:65 \n 分組翻譯解析課程影片時長27分[影片連結] 影片字幕中整理出[逐字稿](雲端空間呈現) 影片逐字稿 \n # 41123119 \n 自評:75 \n 完成事項 其影片逐字稿\xa0 影片 \xa0及\xa0 逐字稿 \n # 41123123 \n 自評:65 \n 完成事項: 教學影片字幕 \n \n # 41123130 \n 自評分數:70 \n 1.上一部教學影片字幕 \n \n 逐字稿 \n # 41123145 \n 自評:75 \n [wcm2024_1a_w3_2_將組員的個人倉儲納為分組倉儲的子模組] 說明如何將組員的個人倉儲納入分組倉儲成為子模組 \n [影片逐字稿] \n # 41123152 \n 自評:75 \n 完成事項 1.製作cd2024_2a_w2_4_利用 Replit 管理 Github Classroom 分組倉儲 (字幕版本)(25:02) \n cd2024_2a_w2_4_利用 Replit 管理 Github Classroom 分組倉儲 (字幕版本) \n 影片逐字稿 \n 2a_w1_video(字幕)  1.如何設定個人倉儲中的 Pelican 網誌 (12:51)  2.簡介 Odoo PLM 用法 (6:45) \n 2a_w1_word(逐字稿)  1.如何設定個人倉儲中的 Pelican 網誌 (12:51)  2.簡介 Odoo PLM 用法 (6:45) \n 2a_w2_video(字幕)  1.如何建立各組的 Team midag1 並利用 Codespaces 維護內容 (13:24)  2.利用 Replit 管理 Github Classroom 分組倉儲 (25:02)  3.如何利用近端可攜環境與外部 IPv4 開啟動態網站 (14:18) \n 2a_w2_word(逐字稿)  1.如何建立各組的 Team midag1 並利用 Codespaces 維護內容 (13:24)  2.利用 Replit 管理 Github Classroom 分組倉儲 (25:02)  3.如何利用近端可攜環境與外部 IPv4 開啟動態網站 (14:18) \n \n', 'tags': '', 'url': '2. 為教學影片上字幕+自評成績.html'}, {'title': '7.提示各分組可以利用可攜式套件, 在近端充分了解個人倉儲與分組倉儲的各種改版或解決衝突議題', 'text': 'update 了 組中自己的子模組 且學習如何用branch 協同更新 \n 方法如下: \n \n 1.在github main create new branch //branch name 我使用學號 41123119 \n \n \n 2.進入自己的branch \n \n 3.create a codspeace on 41123119 \n \n 4.open codspeace \n \n 5.chmod u+x init_replit ./init_replit \n \n 6.git submodule update --init //將 git submodule init 和 git submodule update 合併成一步 \n \n 7.cd 41123119 //進入41123119的子模組 \n 8.git pull origin main//從遠端更新程式碼 並將 main 合併至分支41123119 \n \n 9.cd ..//退到大廳 \n 10.git add . git commit git push \n 11.git merge//合併branch 41123119 至 main \n \n 12.在github確定沒衝突的合併後送出請求 \n \n 13.同意後即可 \n 14.合併後的branch 只要沒有與main有衝突的合併應該可以一直用 \n \n', 'tags': '', 'url': '7.提示各分組可以利用可攜式套件, 在近端充分了解個人倉儲與分組倉儲的各種改版或解決衝突議題.html'}, {'title': '每週心得', 'text': '', 'tags': '', 'url': '每週心得.html'}, {'title': 'w1', 'text': '1.blog 的文檔在 markdown 用pelican套件 轉完後html檔會跑到 blog folder \n 2.為何可以用pelican? 在init_replit安裝 有安裝 pelican套件和markdown套件 \n 3.有關blog 的 檔案 1. local_publishconf.py 啟動留言 \n 2.pelicanconf.py 共用的   進去需要改相關的設定:AUTHOR=學號 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0SITENAME=網誌的名稱(協同產品設計實習) \n 3.publishconf.py 加留言的  進去需要改相關的設定:SITEURL=網誌網址 \n 4.轉檔透過gen_blog 先在shell打入chmod u+x gen_blog才能執行 u:使用者 x:執行 \n 5.page裡要自行更對應正確的網址 網誌前八行的格式不能改變第12行也不行亂改標題大小用#表示:大標#.小標## 轉檔打./gen_blog \n', 'tags': '', 'url': 'w1.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'codespace', 'text': '', 'tags': '', 'url': 'codespace.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};